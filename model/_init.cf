entity HBaseMaster:

end

entity HBaseRegion:

end

entity HadoopHDFS:
    string port = "9000"
    string directory = "hbase"
    string nameDir = "/var/lib/hadoop-hdfs/cache/hdfs/dfs/name"
    string nameDir = "/var/lib/hadoop-hdfs/cache/hdfs/dfs/data"
end

entity Zookeeper:
    string port = "2181"
    string directory = "/var/lib/zookeeper"
end

entity HBaseCluster:

end

entity JavaHost extends ip::services::Server:

end 

HBaseCluster cluster [1] -- [1] HBaseMaster master
HBaseCluster cluster [1] -- [1:] HBaseRegion regions
HBaseCluster cluster [1] -- [1] HadoopHDFS hdfs
HBaseCluster cluster [1] -- [1:] Zookeeper zookeepers

JavaHost host [1] -- [0:] HBaseMaster master
JavaHost host [1] -- [0:] HBaseRegion regions
JavaHost host [1] -- [0:] HadoopHDFS hdfs
JavaHost host [1] -- [0:] Zookeeper zookeepers


implement HBaseMaster using masterImpl, fileIncrease
implement HBaseRegion using regionImpl, fileIncrease
implement Zookeeper using zookeeperImpl
implement HadoopHDFS using hdfsImpl
implement HBaseCluster using std::none
implement JavaHost using javaHost

implementation javaHost:
    java = std::Package(host = host, name = "java", state = "installed")
    r = yum::Repository(host = host, name = "cloudera-cdh4", baseurl = "http://archive.cloudera.com/cdh4/redhat/6/x86_64/cdh/4.5.0/")

end

implementation masterImpl:
    pkg = std::Package(host = host.host, name = "hbase-master", state = "installed")
    
    config = std::ConfigFile(host = host.host, path = "/etc/hbase/conf/hbase-site.xml", content = template("hbase/hbase-site.conf.tmpl"), 
                             requires = pkg, reload = true)
    
    svc = std::Service(host = host.host, name = "hbase-master", state = "running", onboot = true)
    svc.requires = [pkg, config]
    svc.requires = std::Service[host = host.host, name = "hbase-file-increase"]
    svc.requires = std::Package[host = host.host, name = "java"]
end

implementation regionImpl:
    pkg = std::Package(host = host.host, name = "hbase-regionserver", state = "installed")
   
    config = std::ConfigFile(host = host.host, path = "/etc/hbase/conf/hbase-site.xml", content = template("hbase/hbase-site.conf.tmpl"), 
                             requires = pkg, reload = true)
        
    svc = std::Service(host = host.host, name = "hbase-regionserver", state = "running", onboot = true)
    svc.requires = [pkg, config]
    svc.requires = std::Service[host = host.host, name = "hbase-file-increase"]
    svc.requires = std::Package[host = host.host, name = "java"]
end

implementation zookeeperImpl:
    pkg = std::Package(host = host.host, name = "zookeeper-server", state = "installed")
    
    svcFile = std::File(host = host.host, path = "/etc/init.d/zookeeper-server", 
                              content = template("hbase/zookeeper-server.service.tmpl"), 
                             requires = pkg, reload = true,
                             owner = "root", group = "root", mode = 755)
      
    svc = std::Service(host = host.host, name = "zookeeper-server", state = "running", onboot = true)
    svc.requires = [pkg, svcFile]
    svc.requires = std::Package[host = host.host, name = "java"]
end

implementation hdfsImpl:
    pkg = std::Package(host = host.host, name = "hadoop-hdfs", state = "installed")
    pkgNameNode = std::Package(host = host.host, name = "hadoop-hdfs-namenode", state = "installed", requires = pkg)
    pkgDataNode = std::Package(host = host.host, name = "hadoop-hdfs-datanode", state = "installed", requires = pkg)
    
    coresite = std::ConfigFile(host = host.host, path = "/etc/hadoop/conf/core-site.xml", 
                               content = template("hbase/core-site.xml.tmpl"), 
                               requires = pkg, reload = true)
    
    hbasehdfs = std::ConfigFile(host = host.host, path = "/etc/hadoop/conf/hdfs-site.xml", 
                               content = template("hbase/hdfs-site.xml.tmpl"), 
                               requires = pkg, reload = true)
    
    # Formatting the namenode 
    fileFormat = std::File(host = host.host, path = "/usr/bin/hbase-hdfs-format", content = template("hbase/hbase-hdfs-format.tmpl"), 
                             owner = "root", group = "root", mode = 755)
    
    svcFormatFile = std::File(host = host.host, path = "/lib/systemd/system/hbase-hdfs-format.service", 
                                content = file("hbase/hbase-hdfs-format.service"), owner = "root", 
                                group = "root", mode = 755)
    svcFormat = std::Service(host = host.host, name = "hbase-hdfs-format", state = "running", onboot = true,
                           requires = [fileFormat, svcFormatFile])
    
    # Starting the nodes
    svcNameNode = std::Service(host = host.host, name = "hadoop-hdfs-namenode", state = "running", onboot = true,
                           requires = [pkg, pkgNameNode, coresite, hbasehdfs, svcFormat])
    
    svcDataNode = std::Service(host = host.host, name = "hadoop-hdfs-datanode", state = "running", onboot = true,
                           requires = [pkg, svcNameNode, pkgDataNode, coresite, hbasehdfs, svcFormat])

    
    #Starting the init
    fileInit = std::File(host = host.host, path = "/usr/bin/hbase-hdfs-init", content = template("hbase/hbase-hdfs-init.tmpl"), 
                             owner = "root", group = "root", mode = 755)
    
    svcInitFile = std::File(host = host.host, path = "/lib/systemd/system/hbase-hdfs-init.service", 
                                content = file("hbase/hbase-hdfs-init.service"), owner = "root", 
                                group = "root", mode = 755)
    svcInit = std::Service(host = host.host, name = "hbase-hdfs-init", state = "running", onboot = true,
                           requires = [fileInit, svcInitFile, svcNameNode, svcDataNode])
end

implementation fileIncrease:
    fileIncrease = std::File(host = host.host, path = "/usr/bin/hbase-file-increase", content = file("hbase/hbase-file-increase"), 
                             owner = "root", group = "root", mode = 755)
    svcFileIncrease = std::File(host = host.host, path = "/lib/systemd/system/hbase-file-increase.service", 
                                content = file("hbase/hbase-file-increase.service"), owner = "root", group = "root", mode = 755)
    
    svcIncrease = std::Service(host = host.host, name = "hbase-file-increase", state = "running", onboot = true, requires = [fileIncrease, svcFileIncrease])
end
